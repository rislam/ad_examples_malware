from aad.forest_description import *
from sklearn import preprocessing


class MalwareDataStream(object):
    def __init__(self, X, y=None, id_server=None):
        self.X = X
        self.y = y
        self.id_server = id_server
        self.cur_year = 1
        # self.yearwise_count = [2836, 1439, 1444, 1439, 1424, 1439] # when we have anomaly detection case
        # self.yearwise_count = [5077, 3790, 2707, 4290, 2629, 3138] # full data with 10,11 as pretrain
        # self.yearwise_count = [5938, 3790, 2707, 4290, 2629, 3138]# ICSE updated data 10,11 as pretrain and new 961 malware
        self.yearwise_count = [5919, 3774, 2691, 3397, 2168, 2909] # IJCAI submission
        # self.yearwise_count = [3221, 2717, 3790, 2707, 4290, 2629, 3138] # updated data 10 as pretrain
        # self.yearwise_count = [9728, 2707, 4290, 2629, 3138] # updated data 10, 11, 12 as pretrain
        self.max_year = len(self.yearwise_count)
        self.yearwise_data, self.yearwise_label = self.process_yearwise()
        # logger.debug("Processed dataset: %s" % str(self.yearwise_data))

    def process_yearwise(self):
        yearwise_data = {}
        yearwise_label = {}
        count = 0
        for i in range(len(self.yearwise_count)):
            yearwise_data[2010 + i] = self.X[count: count + self.yearwise_count[i]]
            yearwise_label[2010 + i] = self.y[count: count + self.yearwise_count[i]]
            count += self.yearwise_count[i]
        return yearwise_data, yearwise_label


    def read_next_from_stream(self, n=1, normalized=False):
        """Returns first n instances from X and removes these instances from X"""
        if self.cur_year > self.max_year:
            return None
        logger.debug("cur year: %s" % str(self.cur_year))
        n = min(self.yearwise_count[self.cur_year - 1], self.X.shape[0])
        mask = np.zeros(self.X.shape[0], dtype=bool)
        mask[np.arange(n)] = True
        self.X = self.X[~mask]
        instances = self.yearwise_data[2010 + self.cur_year - 1]
        labels = self.yearwise_label[2010 + self.cur_year - 1]
        logger.debug("DataStream.read_next_from_stream instances: %s" % str(instances.shape))
        self.cur_year += 1
        if self.id_server is not None:
            ids = self.id_server.get_next(n)
        logger.debug("IDs %s" % str(ids))
        if normalized is True:
            logger.debug("doing year wise normalization")
            min_max_scaler = preprocessing.MinMaxScaler()
            # logger.debug("instances before")
            # logger.debug("%s", instances[0])
            instances = min_max_scaler.fit_transform(instances)
            # logger.debug("instances after")
            # logger.debug("%s", instances[0])
        return InstanceList(instances, labels, ids)

    def empty(self):
        # if self.cur_year > self.max_year:
        #     return True
        # return False
        return self.X is None or self.X.shape[0] == 0

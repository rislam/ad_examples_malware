from aad.aad_globals import *


def remove_empty_columns(df):
    cols = df.columns.tolist()
    logger.debug("cols len %d" % len(cols))
    cols.insert(1, cols.pop(cols.index('label')))
    if "Unnamed: 2" in cols:
        cols.pop(cols.index("Unnamed: 2"))
    logger.debug("cols len after removal %d" % len(cols))
    return cols

def get_dataset_option_list():
    parser = ArgumentParser()
    parser.add_argument("--dataset_dir", type=str, default="", required=False,
                        help="Dataset directory")
    parser.add_argument("--datafile", type=str, default="", required=False,
                        help="Original data in other format")
    parser.add_argument("--data_output_dir", action="store", default="",
                        help="Folder where to save the dataset")
    parser.add_argument("--seed", action="store", type=int, default="42",
                        help="experiment seed")
    parser.add_argument("--dataset_name", action="store", default="fractal",
                        help="Dataset name")
    parser.add_argument("--debug", action="store_true", default=False,
                        help="Whether to enable output of debug statements")
    parser.add_argument("--log_file", type=str, default="", required=False,
                        help="File path to debug logs")
    parser.add_argument("--startYr", type=int, default="2010", required=False,
                        help="First Year for feature")
    parser.add_argument("--endYr", type=int, default="2017", required=False,
                        help="Last Year for feature")
    parser.add_argument("--useAdaDroid", action="store_true")
    parser.add_argument("--useDroidSieve", action="store_true")
    parser.add_argument("--useMamaDroid", action="store_true")
    parser.add_argument("--useRevealDroid", action="store_true")
    parser.add_argument("--produce_feature", action="store_true")
    parser.add_argument("--merge_feature", action="store_true")

    return parser

def get_data_command_args(debug=False, debug_args=None):
    parser = get_dataset_option_list()

    if debug:
        unparsed_args = debug_args
    else:
        unparsed_args = sys.argv
        if len(unparsed_args) > 0:
            unparsed_args = unparsed_args[1:len(unparsed_args)]  # script name is first arg

    args = parser.parse_args(unparsed_args)
    return args
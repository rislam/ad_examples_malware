import numpy as np
import pandas as pd
import os, time
from os.path import join
# from ..malware.baseline_util import parse_arguments, compute_f1, get_seed
from aad.data_stream import *
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from common.utils import *
from pprint import pprint

# missing value handling
from io import StringIO
import pickle
import random
from random import shuffle
from .dataset_util import *

"""to run this file use
python -m baseline.dataprocess.convert-data-file

it can 
1. convert the features (use produce flag)
2. merge the features to a combined file(-merge_feature)
3. find common feature across the years
"""


def read_pickle(file_name=None):
    """
    Read a pickle file and return the dictionary
    :param file_name:
    :return: dictionary
    """
    if file_name is not None:
        loaded_file = open(file_name, "rb")
        features = pickle.load(loaded_file, encoding="UTF8")
        return features
    return None


def convert_dictionary_to_df(feature_dictionary):
    """
    process a given feature dictionary to a nice data frame format
    :param feature_dictionary:
    :return: dataframe in apk indexed
    """
    df_features = pd.DataFrame(feature_dictionary)
    df_features_T = df_features.T
    assert len(df_features.index) == len(set(df_features_T))
    return df_features_T


def get_all_apk_count(years, features, directory):
    """
    Produce the APK count and feature count for each feature file
    :return:
    """
    for year in years:
        apks_list_all = []
        logger.debug("##########year-start##########")
        dir_str = "malware-" + str(year) + "-all-" + str(year)
        year_directory = join(directory, dir_str)
        for feature in features:
            print("****reading for year %d and feature type %s " % (year, feature), end="\n")
            year_feature_directory = join(year_directory, feature)

            for dirname, dirnames, filenames in os.walk(year_feature_directory):
                #                 print(dirname, dirnames, filenames)
                for f_name in filenames:
                    #                     if "zoobenign" not in f_name or
                    year_feature_file_name = join(year_feature_directory, f_name)
                    if "csv" not in f_name:
                        # print("feature count for ", f_name, end=" ")
                        logger.debug("feature count for " % f_name)
                        dict_features = read_pickle(file_name=year_feature_file_name)
                        apks_list = list(dict_features.index)
                        apks_list_all.append(apks_list)
                    #                         dictonary_to_dataframe(dict_features)
                    else:
                        data = pd.read_csv(year_feature_file_name)
                        logger.debug("feature count for " % data.shape)
        logger.debug("##########year-end##########")
        return apks_list_all


def in_ignore_list(file_name):
    return "static.pickle.benign" in file_name or "combined" in file_name


def is_benign_file(file_name):
    return "benign" in file_name \
           or "zoobenign" in file_name \
           or "benigns" in file_name


def is_malware_file(file_name):
    return not is_benign_file(file_name) or "anomalies" in file_name


def get_AdaDroid_apks(directory, dir_str):
    """
    Return Adadroid Features as a data-frame
    :param directory:
    :param year:
    :return:
    """
    year_feature_directory = join(directory, dir_str, "fullsamples")
    logger.debug("year feature directory %s" % year_feature_directory)
    malware_apks = None
    benign_apks = None
    for dirname, dirnames, filenames in os.walk(year_feature_directory):
        for f_name in filenames:
            file_to_read = join(year_feature_directory, f_name)
            if "anomalies" in f_name:
                df = pd.read_csv(file_to_read, skiprows=1, header=None)
                malware_apks = list(df[0])
            elif "benigns" in f_name:
                df = pd.read_csv(file_to_read, skiprows=1, header=None)
                benign_apks = list(df[0])
    logger.debug("benign apks count %d and malware %d" %(len(benign_apks), len(malware_apks)))
    return benign_apks, malware_apks


def get_MamaDroid_features(directory, year):
    """
    Return MamaDroid Features as a data-frame
    :param directory:
    :param year:
    :return:
    """
    pass


def get_year_apks(year=2010, directory=None, features=None):
    """
    Return all features common apks for the given year.
    :param year:int
    :param directory:str
    :param features:pandas data-frame
    :return:
    """
    dir_str = "malware-" + str(year) + "-all-" + str(year)
    year_directory = join(directory, dir_str)
    apks_map = {}

    for feature in features:
        # print("****For year %d and feature name %s " % (year, feature), end="\n")
        if "AdaDroid" in feature:
            adadroid_directory = "/Users/mislam1/Documents/RA/research-2018/sequential-anomaly-detection/src/temp/dataset-checking"
            benign, anomaly = get_AdaDroid_apks(adadroid_directory, dir_str)
            apks_map[feature + "-malware"] = anomaly
            apks_map[feature + "-benign"] = benign
        else:
            year_feature_directory = join(year_directory, feature)
            for dirname, dirnames, filenames in os.walk(year_feature_directory):
                for f_name in filenames:
                    # print("processing file: ", f_name)
                    if in_ignore_list(f_name) or ".DS_Store" in f_name:
                        logger.debug("ignoring file %s" %f_name)
                        continue
                    if is_malware_file(f_name):
                        key = feature + "-malware"
                    if is_benign_file(f_name):
                        key = feature + "-benign"
                    year_feature_file_name = join(year_feature_directory, f_name)
                    # print("key name ", key)
                    # print("year_feature_file_name ", year_feature_file_name)
                    if "csv" not in f_name:
                        # print("feature count for ", f_name, end=" ")
                        dict_features = read_pickle(file_name=year_feature_file_name)
                        features_df = convert_dictionary_to_df(dict_features)
                        apks_list = features_df.index.values
                        # dictonary_to_dataframe(dict_features)
                    else:
                        features_df = pd.read_csv(year_feature_file_name)
                        col_names = list(features_df.columns.values)
                        mod_col_name = list()
                        for item in col_names:
                            mod_col_name.append(item.replace("\'", "").replace(".", "")
                                                .replace("\'", ""))
                        features_df.columns = mod_col_name
                        # print(f_name, " shape ", features_df.shape)
                        # print(features_df.columns)
                        # print(features_df.head())
                        if 'Unnamed: 0' in features_df.columns:
                            apks_list = list(features_df['Unnamed: 0'].values)
                        else:
                            features_df.set_index('filename', inplace=True)
                            apks_list = list(features_df.index)
                    features_df.fillna(0, inplace=True)
                    apks_map[key] = apks_list
                    # print("adding ", key, " length ", len(apks_list))
                    logger.debug("adding %s length %s" %(key, len(apks_list)))
    return apks_map


def get_AdaDroid_feature(directory, dir_str):
    year_feature_directory = join(directory, dir_str, "fullsamples")
    # print(year_feature_directory)
    feat_filename = join(year_feature_directory, dir_str + "_1.csv")
    feat_df = pd.read_csv(feat_filename)
    logger.debug("#getting Adadroid Features#")
    logger.debug("feature shape %s and read from dir %s" %(feat_df.shape[0], year_feature_directory))
    # print("dim ", feat_df.shape, " ", year_feature_directory)
    # print(feat_df.head())
    return feat_df


def convert_column_names(column_names):
    mod_col_name = list()
    for item in column_names:
        if item is "":
            continue
        mod_col_name.append(item.replace("\'", "").replace(" ","")
                            .replace("\'", "")
                            .replace(",","").lower())

    return mod_col_name


def save_apk_features(benign_apks, malware_apks, year=2010, directory=None, features=None):
    dir_str = "malware-" + str(year) + "-all-" + str(year)
    year_directory = join(directory, dir_str)
    year_feature_directory = None
    combined_apks = list()
    combined_apks.extend(benign_apks)
    combined_apks.extend(malware_apks)
    shuffle(combined_apks)
    all_feature_map = {}
    for feature in features:
        # print("****For year %d and feature name %s " % (year, feature), end="\n")
        if "Adadroid" in feature:
            year_feature_directory = "/Users/mislam1/Documents/RA/research-2018/sequential-anomaly-detection/src/temp/dataset-checking"
            feature_df = get_AdaDroid_feature(year_feature_directory, dir_str)
            # print(feature_df.ix[combined_apks])
            combined_features = feature_df.loc[combined_apks, :]
            # print(combined_features.head())
        else:
            year_feature_directory = join(year_directory, feature)
            combined_features = None
            combined_df = None
            for dirname, dirnames, filenames in os.walk(year_feature_directory):
                for f_name in filenames:
                    # print("processing file: ", f_name)
                    logger.debug("processing file: %s" % f_name)
                    features_df = None
                    if in_ignore_list(f_name) or ".DS_Store" in f_name:
                        logger.debug("ignoring file %s" %f_name)
                        continue
                    if is_malware_file(f_name):
                        key = feature + "-malware"
                    if is_benign_file(f_name):
                        key = feature + "-benign"
                    year_feature_file_name = join(year_feature_directory, f_name)
                    # print("key name ", key)
                    # print("year_feature_file_name ", year_feature_file_name)
                    if "csv" not in f_name:
                        # print("feature count for ", f_name, end=" ")
                        dict_features = read_pickle(file_name=year_feature_file_name)
                        features_df = convert_dictionary_to_df(dict_features)
                        col_names = list(features_df.columns.values)
                        # print("before set ", len(col_names), end="")
                        logger.debug("w/o labels %s" % (len(col_names)))
                        modfied_columns = convert_column_names(col_names)
                        features_df =  features_df.reindex(columns=modfied_columns)
                        col_set = set(features_df.columns.values)
                        # sorted_col = sorted(list(col_set))
                        sorted_col = list(col_set)
                        # features_df = features_df[sorted_col]
                        features_df = features_df.loc[:, ~features_df.columns.duplicated()]
                        # print(" after set ", len(sorted_col), " feature df ", features_df.shape)
                        logger.debug("with labels %s" % (len(sorted_col)))
                    else:
                        features_df = pd.read_csv(year_feature_file_name)
                        col_names = list(features_df.columns.values)
                        # print("before set ", len(col_names), end="")
                        logger.debug("w/o labels %s" % (len(col_names)))
                        features_df.columns = convert_column_names(col_names)
                        col_set = set(features_df.columns.values)
                        # sorted_col = sorted(list(col_set))
                        sorted_col = list(col_set)
                        # features_df = features_df[sorted_col]
                        features_df = features_df.loc[:, ~features_df.columns.duplicated()]
                        # print(" after set ", len(sorted_col), " feature df ", features_df.shape)
                        logger.debug("with labels %s" % (len(sorted_col)))
                        # print(f_name, " shape ", features_df.shape)
                        # print(features_df.columns)
                        # apks_list = list(features_df['Unnamed: 0'].values)
                        if 'Unnamed: 0' in features_df.columns:
                            apks_list = list(features_df['Unnamed: 0'].values)
                            features_df.set_index('Unnamed: 0', inplace=True)
                        else:
                            apks_list = list(features_df['filename'].values)
                            features_df.set_index('filename', inplace=True)
                    # print("adding ", key, " length ", len(apks_list))
                    logger.debug("label addition started\n")
                    if "malware" in key and 'label' not in features_df.columns:
                        labels = ['anomaly'] * features_df.shape[0]
                        features_df.insert(loc=0, column='label', value=labels)
                    elif 'benign' in key and 'label' not in features_df.columns:
                        labels = ['nominal'] * features_df.shape[0]
                        features_df.insert(loc=0, column='label', value=labels)
                    logger.debug("label addition done\n")

                    if combined_df is None:
                        combined_df = features_df
                    else:
                        if feature is 'Revealdroid':
                            df1b, df2b = combined_df.align(features_df, axis=1)
                            logger.debug("%s" %df1b.shape())
                            logger.debug("%s" % df1b.info())
                            logger.debug("%s" % df2b.shape())
                            logger.debug("%s" % df2b.info())
                            combined_df = pd.concat([df1b, df2b], ignore_index=True)
                            logger.debug("combined df shape %d" %(combined_df.shape[0]))
                        else:
                            combined_df = combined_df.append(features_df)
                    logger.debug("combined columns %s" % combined_df.columns)
                    logger.debug("**Initial combined df %d %d " % (combined_df.shape[0], combined_df.shape[1]))

                    cols = combined_df.columns.tolist()
                    cols.insert(0, cols.pop(cols.index('label')))
                    combined_df = combined_df.reindex(columns=cols)
                    logger.debug("column names %s" %(combined_df.columns[:3]))

                combined_df.fillna(0, inplace=True)
                logger.debug("feature shape %s and read from dir %s" % (combined_df.shape[0], year_feature_directory))
                combined_features = combined_df.ix[combined_apks]
        logger.debug("combined features %d" %combined_features.shape[0])

        write_to_file(combined_features, combined_apks, year_feature_directory, feature, year=year)
        all_feature_map [str(year) + "-" + feature + "-merged"] = combined_features
        # print("%% saved ", str(year) + "-" + feature + "-merged")

    return all_feature_map


def write_to_file(feat_df, apks_list, directory=None, feature=None, year=2010):
    logger.debug("**write to file feat df %d" %(feat_df.shape[0]))
    t0 = time.time()
    if feature is 'Revealdroid':
        save_directory = join(directory, str(year) + "-" + feature + "combined.csv.gz")
        feat_df.to_csv(save_directory, compression='gzip', chunksize=1000, encoding='utf-8')
        logger.debug("saved Revealdroid file %s in %f" % (save_directory, time.time() - t0))
    else:
        save_directory = join(directory, str(year) + "-" + feature + "combined.csv")
        feat_df.to_csv(save_directory)
        logger.debug("saved file %s" %save_directory)


def find_common_keys(apks_map):
    all_keys = apks_map.keys()
    common_malwares = None
    common_benigns = None
    for key in all_keys:
        if "malware" in key:
            if common_malwares is None:
                common_malwares = set(apks_map[key])
            common_malwares = common_malwares.intersection(set(apks_map[key]))

        if "benign" in key:
            if common_benigns is None:
                common_benigns = set(apks_map[key])
            common_benigns = common_benigns.intersection(set(apks_map[key]))
    # print("#################")
    # print("common benings ", len(common_benigns), " malwares ",
    #       len(common_malwares))
    # print("#################")
    logger.debug("common benings %d and malwares %d" %(len(common_benigns), len(common_malwares)))
    return common_benigns, common_malwares


def merge_all_years(args):
    """
    Merge all years data frames using concat and outrt join of pandas
    :param yearwise_map:
    :param features:
    :param years:
    :return:
    """

    for feature in args.features:
        logger.debug("merging %s" %feature)
        data_frames_list = list()
        for year in args.years:
            dir_str = "malware-" + str(year) + "-all-" + str(year)
            year_directory = join(args.dataset_dir, dir_str)
            if "Adadroid" in feature:
                year_feature_directory = "/Users/mislam1/Documents/RA/research-2018/sequential-anomaly-detection/src/temp/dataset-checking"
            else:
                year_feature_directory = join(year_directory, feature)
            f_name = join(year_feature_directory, str(year) + "-" + feature +"combined.csv")
            y_df =  pd.read_csv(f_name)
            if feature is 'Adadroid':
                y_df.set_index(['Unnamed: 0'], inplace=True)
            elif feature is 'Mamadroid':
                y_df.set_index(['filename'], inplace=True)
            else:
                y_df.set_index(['Unnamed: 0'], inplace=True)
            logger.debug("%s" % y_df.index)
            # y_df = y_df.reindex(remove_empty_columns(y_df))
            data_frames_list.append(y_df)
            logger.debug("%d year data shape %d %d" %(year, y_df.shape[0], y_df.shape[1]))

        logger.debug("%d data frames" %len(data_frames_list))
        if len(data_frames_list) > 1:
            result = data_frames_list[0].append(data_frames_list[1:])
        else:
            result = data_frames_list[0]
        logger.debug("result shape %d" %result.shape[0])

        op_dir = join(args.data_output_dir, feature, "fullsamples")
        if os.path.exists(op_dir) is False:
            os.makedirs(op_dir, exist_ok=True)

        cols = result.columns.tolist()
        logger.debug("cols len %d" %len(cols))
        # if feature is not "Adadroid":
        cols.insert(0, cols.pop(cols.index('label')))

        result = result.reindex(columns=cols)

        # if feature is 'DroidSieve':
        #     c_names = result.columns.values
        #     c_index = list()
        #     c_index.append("label")
        #     for item in c_names:
        #         if item is "label":
        #             continue
        #         c_index.append(item)
        #     logger.debug("c_index %s" %c_index[:3])
        #     result = result[c_index]
        result.fillna(0, inplace=True)

        # data_frame = result.drop(result.columns[0], axis=1)
        result.to_csv(join(op_dir, feature) + "_1.csv", index=False)


def write_apk_list(common_benigns, common_malwares, year=2010):
    """save the common apk list for each year. One for benign one for malware for each year """
    data_dir = "temp/data-creation"
    if not os.path.exists(data_dir):
        os.makedirs(path=data_dir, exist_ok=True)
    assert len(common_malwares) > 0
    assert len(common_benigns) > 0
    f_name = join(data_dir, str(year) + "-" + "benigns")

    with open(f_name, "w") as f:
        l = list(common_benigns)
        f.write("#of benigns %d\n" % (len(l)))
        for item in l:
            f.write(item + "\n")

    f_name = join(data_dir, str(year) + "-" + "malwares")
    with open(f_name, "w") as f:
        l = list(common_malwares)
        f.write("#of malwares %d\n" % (len(l)))
        for item in l:
            f.writelines(item + "\n")


def get_apks(year, dir="temp/data-creation"):
    with open(join(dir, str(year) + "-benigns"), 'r') as f:
        b_apks = [x.strip() for x in f.readlines()]
    with open(join(dir, str(year) + "-malwares"), 'r') as f:
        m_apks = [x.strip() for x in f.readlines()]
    return b_apks[1:], m_apks[1:]


def features_from_apklist(args):
    for y in args.years:
        b_apks, m_apks = get_apks(y)
        print(y, len(b_apks), len(m_apks))
        save_apk_features(b_apks,m_apks, y,
                          directory=args.dataset_dir,
                          features=args.features)



def main(args):
    """main function, entry point"""
    random.seed(args.seed)
    np.random.seed(args.seed)
    start = time.time()
    # directory = "/Users/mislam1/Documents/RA/research-2018/malware-detection/malware-dataset1218"
    directory = args.dataset_dir
    years = [i for i in range(args.startYr, args.endYr, 1)]
    # features = ['AdaDroid', 'DroidSieve', 'Revealdroid', 'Mamadroid',]
    # features = ['AdaDroid', 'DroidSieve', 'Revealdroid']
    features = list()
    if args.useAdaDroid is True:
        features.append('Adadroid')
    if args.useMamaDroid is True:
        features.append('Mamadroid')
    if args.useRevealDroid is True:
        features.append('Revealdroid')
    if args.useDroidSieve is True:
        features.append('DroidSieve')

    args.years = years
    args.features = features
    if args.produce_feature is True:
        features_from_apklist(args)
    elif args.merge_feature is True:
        merge_all_years(args)
    else:
        logger.debug("Processing years %s" % (years))
        logger.debug("Feature set %s" %(features))
        feature_year_map = {}
        for y in years:
            apks_map = get_year_apks(y, directory, features)
            # logger.debug("apks map %s" %apks_map)
            common_benigns, common_malwares = find_common_keys(apks_map)
            # all_merged = save_apk_features(common_benigns, common_malwares, y, directory, features)
            # feature_year_map[str(y)] = all_merged
            write_apk_list(common_benigns, common_malwares, year=y)
        # merge_all_years(feature_year_map, features, years)
    logger.debug("finished!! time taken %s" % ((time.time() - start)/60.0))


if __name__ == '__main__':
    logger = logging.getLogger(__name__)

    dir_create("./temp/data-creation")
    args = get_data_command_args(debug=True, debug_args=["--debug",
                                                         "--dataset_dir=/Users/mislam1/Documents/RA/research-2018/malware-detection/malware-dataset1218/",
                                                         "--data_output_dir=/Users/mislam1/Documents/RA/research-2018/malware-detection/malware-dataset1218/combined",
                                                         # "--useAdaDroid",
                                                         "--useDroidSieve",
                                                         # "--useRevealDroid",
                                                         # "--useMamaDroid",
                                                         "--startYr=2010",
                                                         "--endYr=2017",
                                                         "--log_file=temp/data-creation/ds.log",
                                                         # "--produce_feature",
                                                         "--merge_feature",
                                                         ])
    print("log file: %s" % args.log_file)
    configure_logger(args)

    np.random.seed(seed=args.seed)
    logger.debug("running: %s" % args)

    main(args)
